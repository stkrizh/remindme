// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: channel.sql

package sqlcgen

import (
	"context"
	"database/sql"
	"time"

	"github.com/jackc/pgtype"
)

const countChannels = `-- name: CountChannels :one
SELECT COUNT(id) FROM channel WHERE
    ($1::boolean OR user_id = $2::bigint)
    AND ($3::boolean OR type = $4::text)
`

type CountChannelsParams struct {
	AllUserIds   bool
	UserIDEquals int64
	AllTypes     bool
	TypeEquals   string
}

func (q *Queries) CountChannels(ctx context.Context, arg CountChannelsParams) (int64, error) {
	row := q.db.QueryRow(ctx, countChannels,
		arg.AllUserIds,
		arg.UserIDEquals,
		arg.AllTypes,
		arg.TypeEquals,
	)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createChannel = `-- name: CreateChannel :one
INSERT INTO channel (user_id, created_at, type, settings, verification_token, verified_at)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, user_id, created_at, type, settings, verification_token, verified_at
`

type CreateChannelParams struct {
	UserID            int64
	CreatedAt         time.Time
	Type              string
	Settings          pgtype.JSONB
	VerificationToken sql.NullString
	VerifiedAt        sql.NullTime
}

func (q *Queries) CreateChannel(ctx context.Context, arg CreateChannelParams) (Channel, error) {
	row := q.db.QueryRow(ctx, createChannel,
		arg.UserID,
		arg.CreatedAt,
		arg.Type,
		arg.Settings,
		arg.VerificationToken,
		arg.VerifiedAt,
	)
	var i Channel
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreatedAt,
		&i.Type,
		&i.Settings,
		&i.VerificationToken,
		&i.VerifiedAt,
	)
	return i, err
}

const getChannelByID = `-- name: GetChannelByID :one
SELECT id, user_id, created_at, type, settings, verification_token, verified_at FROM channel WHERE id = $1
`

func (q *Queries) GetChannelByID(ctx context.Context, id int64) (Channel, error) {
	row := q.db.QueryRow(ctx, getChannelByID, id)
	var i Channel
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreatedAt,
		&i.Type,
		&i.Settings,
		&i.VerificationToken,
		&i.VerifiedAt,
	)
	return i, err
}

const readChanels = `-- name: ReadChanels :many
SELECT id, user_id, created_at, type, settings, verification_token, verified_at FROM channel WHERE 
    ($1::boolean OR user_id = $2::bigint)
    AND ($3::boolean OR type = $4::text)
ORDER BY id
`

type ReadChanelsParams struct {
	AllUserIds   bool
	UserIDEquals int64
	AllTypes     bool
	TypeEquals   string
}

func (q *Queries) ReadChanels(ctx context.Context, arg ReadChanelsParams) ([]Channel, error) {
	rows, err := q.db.Query(ctx, readChanels,
		arg.AllUserIds,
		arg.UserIDEquals,
		arg.AllTypes,
		arg.TypeEquals,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Channel
	for rows.Next() {
		var i Channel
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.CreatedAt,
			&i.Type,
			&i.Settings,
			&i.VerificationToken,
			&i.VerifiedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateChannel = `-- name: UpdateChannel :one
UPDATE channel 
SET 
    verification_token = CASE WHEN $2::boolean THEN $3
        ELSE verification_token END,
    verified_at = CASE WHEN $4::boolean THEN $5
        ELSE verified_at END,
    settings = CASE WHEN $6::boolean THEN $7
        ELSE settings END
WHERE id = $1
RETURNING id, user_id, created_at, type, settings, verification_token, verified_at
`

type UpdateChannelParams struct {
	ID                        int64
	DoVerificationTokenUpdate bool
	VerificationToken         sql.NullString
	DoVerifiedAtUpdate        bool
	VerifiedAt                sql.NullTime
	DoSettingsUpdate          bool
	Settings                  pgtype.JSONB
}

func (q *Queries) UpdateChannel(ctx context.Context, arg UpdateChannelParams) (Channel, error) {
	row := q.db.QueryRow(ctx, updateChannel,
		arg.ID,
		arg.DoVerificationTokenUpdate,
		arg.VerificationToken,
		arg.DoVerifiedAtUpdate,
		arg.VerifiedAt,
		arg.DoSettingsUpdate,
		arg.Settings,
	)
	var i Channel
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreatedAt,
		&i.Type,
		&i.Settings,
		&i.VerificationToken,
		&i.VerifiedAt,
	)
	return i, err
}
